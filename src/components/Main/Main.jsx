import React, { useEffect, useState } from 'react'
import { useDispatch } from 'react-redux'
import { useNavigate } from 'react-router-dom'
import { getDatabase, ref, child, get } from 'firebase/database'
import SaleStiker from '../SaleStiker/SaleStiker'
import Card from '../Card/Card'
import * as S from './styles'
import Button from '../Button/Button'
import { getCourses } from '../../store/slices/coursesSlices'
import { useCourses } from '../../hooks/use-courses'

function Main() {
  const navigate = useNavigate()
  const dispatch = useDispatch()
  const { isCourses, courses } = useCourses()
  /// /////////////////////////////////////////

  /* –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–∞—Å—Å–∏–≤ –∫—É—Ä—Å–æ–≤ courses,–ø—É—Ç–µ–º –µ–≥–æ –æ–±—Ö–æ–¥–∞ –∏ —Ä–µ–Ω–¥–µ—Ä–∞ –∫–∞—Ä—Ç–æ—á–µ–∫ –ø–æ –¥–∞–Ω–Ω—ã–º  */
  // –Ω–∞–∑–≤–∞–Ω–∏—è –∫—É—Ä—Å–æ–≤ –º–æ–∂–Ω–æ –≤–∑—è—Ç—å —Ç–∞–∫, –ø—Ä–∏–º–µ—Ä console.log(courses[0].nameRu)
  // –¥–ª—è –ø–æ–¥–±–æ—Ä–∞ –Ω—É–∂–Ω–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–∏ –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–µ –∫—É—Ä—Å–∞ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–Ω–≥–ª –∏–º—è,–µ—Å–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –æ–±—Ä–∞–∑–æ–º –Ω–∞–∑–≤–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫–∏ –≤ –ø–∞–ø–∫–µ images, –ø—Ä–∏–º–µ—Ä  console.log(courses[0].nameEng)
  /// ////////////////////////////////////////////
  /// —Ñ—É–Ω–∫—Ü–∏—è –ø–µ—Ä–≤–æ–Ω–æ—á–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ —Å—Ç–æ—Ä–µ –ø–æ –∫—É—Ä—Å–∞–º –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ main
  useEffect(() => {
    const dbRef = ref(getDatabase())

    get(child(dbRef, `courses/`))
      .then((snapshot) => {
        if (snapshot.exists()) {
          const data = snapshot.val()

          dispatch(
            getCourses({
              courses: data,
            })
          )
        } else {
          console.log('No data available')
        }
      })
      .catch((error) => {
        console.error(error)
      })
  }, [])
  const UpWindow = () => {
    window.scrollTo({
      top: 0,
      left: 0,
      behavior: 'smooth',
    })
  }

  // eslint-disable-next-line no-underscore-dangle

  return (
    <div>
      <S.Main>
        <S.MainSubTitle>–û–Ω–ª–∞–π–Ω-—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –¥–ª—è –∑–∞–Ω—è—Ç–∏–π –¥–æ–º–∞</S.MainSubTitle>
        <S.MainTitle>
          –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–∏–º–∞—Ç—å—Å—è —Å–ø–æ—Ä—Ç–æ–º –∏ —É–ª—É—á—à–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –∂–∏–∑–Ω–∏
        </S.MainTitle>
        {/* <SaleStiker /> –ï—Å–ª–∏ –ø—Ä–æ—Å—Ç–æ 1 —Ñ–æ—Ç–æ, –∫–æ—Ç–æ—Ä–æ–µ –Ω–∏–≥–¥–µ –Ω–µ –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –ª—É—á—à–µ –Ω–µ –¥–µ–ª–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç */}
        <SaleStiker />
        {/*   <S.MainCards> –õ—É—á—à–µ —Å–¥–µ–ª–∞—Ç—å –æ—Ç–¥–ª—å–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∏ —Å–¥–µ–ª–∞—Ç—å –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ, –∏ –ø–µ—Ä–µ–±–∏—Ä–∞—Ç—å –º–∞—Å—Å–∏–≤–æ–º, —Ç–æ–≥–¥–∞ –≤ —Å—Ç–∏–ª—è—Ö –∫–∞—Ä—Ç–æ—á–∫–∏(–∫–æ–º–ø–æ–Ω–µ–Ω—Ç <Card>) –Ω–µ –Ω–∞–¥–æ –±—É–¥–µ—Ç —Å—Ç–∞–≤–∏—Ç—å if else —Ç–∞–∫ –º–Ω–æ–≥–æ –¥–ª—è –∫–∞—Ä—Ç–∏–Ω–æ–∫(backgroundImage) */}
        <S.MainCards>
          {isCourses && (
            <>
              {courses.map((item, i) => (
                <Card
                  key={item.id}
                  titleCard={item.nameRu}
                  back={`card-${item.nameEng}`}
                  onClick={() => navigate(`/courses/${i}`)}
                />
              ))}
            </>
          )}
          {!isCourses && (
            <>
              <Card />
              <Card />
              <Card />
              <Card />
              <Card />
            </>
          )}
        </S.MainCards>
        <Button callback={UpWindow} isGreen buttonName="">
          –ù–∞–≤–µ—Ä—Ö ü†ï
        </Button>
      </S.Main>
    </div>
  )
}

export default Main
